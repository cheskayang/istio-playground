apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-b-v1
  namespace: cheska
spec:
  selector:
    matchLabels:
      app: service-b
  template:
    metadata:
      labels:
        app: service-b
        version: v1
    spec:
      containers:
        - name: event-producer
          image: gcr.io/clearbanc-api-dev/service-b:v4
          imagePullPolicy: Always
          env:
          - name: VERSION
            value: "v1" 
          readinessProbe:
            httpGet:
              path: /readiness_check
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 15
          livenessProbe:
            httpGet:
              path: /liveness_check
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 15

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-b-v2
  namespace: cheska
spec:
  selector:
    matchLabels:
      app: service-b
  template:
    metadata:
      labels:
        app: service-b
        version: v2
    spec:
      containers:
        - name: event-producer
          image: gcr.io/clearbanc-api-dev/service-b:v4
          imagePullPolicy: Always
          env:
          - name: VERSION
            value: "v2" 
          readinessProbe:
            httpGet:
              path: /readiness_check
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 15
          livenessProbe:
            httpGet:
              path: /liveness_check
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 15
---

# A deployment creates a set of pods and you need a centralized way of communicating with those pods
# This is where a service comes to play, it is responsible for enabling network access to a set of pods.
apiVersion: v1
kind: Service
metadata:
  name: service-b
  namespace: cheska
  labels:
    app: service-b
spec:
  # Expose the service on a static port on each node
  # so that we can access the service from outside the cluster
  type: ClusterIP
  # When the node receives a request it will
  # "select pods with the label 'app' set to 'api'"
  # and forward the request to one of them
  selector:
    app: service-b
  ports:
    # Three types of ports for a service
    # nodePort - a static port assigned on each the node
    # port - port exposed internally in the cluster
    # targetPort - the container port to send requests to
  - port: 80
    # The api container accepts http requests at 8080, this where requests are targeted
    # defined in the api container by 'containerPort' and named 'port-http'
    targetPort: 8080
    protocol: TCP
